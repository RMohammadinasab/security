import dns.resolver
import dns.query
import dns.zone
import dns.message
import time
import socket

# Function to check Zone Transfer Vulnerability
def check_zone_transfer(domain):
    print("[+] Checking for Zone Transfer Vulnerability...")
    try:
        ns_records = dns.resolver.resolve(domain, 'NS')
        for ns in ns_records:
            ns_ip = ns.to_text()
            try:
                z = dns.zone.from_xfr(dns.query.xfr(ns_ip, domain))
                print(f"[!] Zone Transfer successful on {ns_ip}!")
                return f"Zone Transfer successful on {ns_ip}!"
            except Exception:
                pass
    except Exception:
        pass
    print("[-] No Zone Transfer vulnerability detected.")
    return "No Zone Transfer vulnerability detected."

# Function to perform Reverse DNS Lookup
def reverse_dns_lookup(ip):
    print("[+] Checking Reverse DNS Lookup...")
    try:
        result = dns.resolver.resolve_address(ip)
        return result[0].to_text()
    except Exception:
        return "Not Found"

# Function to check DNS Cache Snooping with detailed packet analysis
def check_dns_cache_snooping(domain, dns_servers):
    print("[+] Checking DNS Cache Snooping...")
    snooped_servers = {}
    for dns_server in dns_servers:
        try:
            query = dns.message.make_query(domain, dns.rdatatype.A)
            response = dns.query.udp(query, dns_server, timeout=2)
            if response.answer:
                answers = [(str(ans), ans.ttl) for ans in response.answer]
                snooped_servers[dns_server] = {
                    "answers": answers,
                    "headers": response.flags,
                    "response_packet": response.to_text()
                }
                print(f"[!] Cache Snooping possible on {dns_server} for {domain}: {answers}")
                print(f"[+] Response Headers: {response.flags}")
                print(f"[+] Full Response Packet:\n{response.to_text()}")
            else:
                print(f"[-] No Cache Snooping detected on {dns_server}")
        except Exception:
            print(f"[-] Error querying {dns_server}")
    return snooped_servers

# Function to check for potential DNS Cache Poisoning with detailed logging
def check_dns_poisoning(domain, dns_servers):
    print("[+] Checking for DNS Cache Poisoning...")
    poisoning_detected = {}
    responses = {}
    request_details = {}
    for dns_server in dns_servers:
        try:
            query = dns.message.make_query(domain, dns.rdatatype.A)
            response = dns.query.udp(query, dns_server, timeout=2)
            if response.answer:
                answers = tuple(sorted(str(ans) for ans in response.answer))
                if dns_server in responses and responses[dns_server] != answers:
                    poisoning_detected[dns_server] = {
                        "answers": answers,
                        "headers": response.flags,
                        "response_packet": response.to_text()
                    }
                responses[dns_server] = answers
                request_details[dns_server] = {
                    "headers": response.flags,
                    "response_packet": response.to_text()
                }
        except Exception:
            pass
    if poisoning_detected:
        print("[!] Potential DNS Cache Poisoning detected!")
        return poisoning_detected, request_details
    print("[-] No DNS Cache Poisoning detected.")
    return "No DNS Cache Poisoning detected.", request_details

if __name__ == "__main__":
    subdomains_file = input("Enter the path to the subdomains file (e.g. subs.txt): ").strip()
    try:
        with open(subdomains_file, "r") as f:
            subdomains = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        print(f"[!] File '{subdomains_file}' not found!")
        exit(1)
    
    dns_servers = ["8.8.8.8", "1.1.1.1", "9.9.9.9"]  # List of DNS servers to test
    results = []
    
    for domain in subdomains:
        print(f"[+] Testing {domain}...")
        results.append(f"Results for {domain}:")
        
        # Check Zone Transfer
        results.append(check_zone_transfer(domain))
        
        # Perform Reverse DNS Lookup
        test_ip = "8.8.8.8"  # Example IP, change if needed
        reverse_lookup = reverse_dns_lookup(test_ip)
        results.append(f"Reverse DNS Lookup Result for {test_ip}: {reverse_lookup}")
        
        # Perform DNS Cache Snooping with packet analysis
        snooping_results = check_dns_cache_snooping(domain, dns_servers)
        if snooping_results:
            results.append("Cache Snooping detected:")
            results.extend([f"{server}: {snooping_results[server]}" for server in snooping_results])
        
        # Check for DNS Cache Poisoning with response packet logging
        poisoning_results, request_logs = check_dns_poisoning(domain, dns_servers)
        results.append(f"Cache Poisoning Check: {poisoning_results}")
        results.append("Request Logs:")
        results.extend([f"{server}: {request_logs[server]}" for server in request_logs])
    
    # Save results to a file
    with open("dns_scan_results.txt", "w") as f:
        f.write("\n".join(results))
    print("[+] Scan complete! Results saved to dns_scan_results.txt")
